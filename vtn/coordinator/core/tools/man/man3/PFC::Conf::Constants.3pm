.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PFC::Conf::Constants 3"
.TH PFC::Conf::Constants 3 "2015-08-20" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PFC::Conf::Constants \- Parser constants
.SH "ABSTRACT"
.IX Header "ABSTRACT"
\&\fBPFC::Conf::Constants\fR defines constants used by the cfdef file parser.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section describes about public constants for \fBPFC::Core::Constants\fR.
.SS "\s-1TOKEN TYPE\s0"
.IX Subsection "TOKEN TYPE"
.IP "\fB\s-1TOKEN_SEMI\s0\fR" 4
.IX Item "TOKEN_SEMI"
Token type which represents a semicolon. (;)
.IP "\fB\s-1TOKEN_LBRACE\s0\fR" 4
.IX Item "TOKEN_LBRACE"
Token type which represents a left brace. ({)
.IP "\fB\s-1TOKEN_RBRACE\s0\fR" 4
.IX Item "TOKEN_RBRACE"
Token type which represents a right brace. (})
.IP "\fB\s-1TOKEN_SQLEFT\s0\fR" 4
.IX Item "TOKEN_SQLEFT"
Token type which represents a left square bracket. ([)
.IP "\fB\s-1TOKEN_SQRIGHT\s0\fR" 4
.IX Item "TOKEN_SQRIGHT"
Token type which represents a right square bracket. (])
.IP "\fB\s-1TOKEN_EQUAL\s0\fR" 4
.IX Item "TOKEN_EQUAL"
Token type which represents an equal. (=)
.IP "\fB\s-1TOKEN_COMMA\s0\fR" 4
.IX Item "TOKEN_COMMA"
Token type which represents a comma. (,)
.IP "\fB\s-1TOKEN_COLON\s0\fR" 4
.IX Item "TOKEN_COLON"
Token type which represents a colon. (:)
.IP "\fB\s-1TOKEN_SYMBOL\s0\fR" 4
.IX Item "TOKEN_SYMBOL"
Token type which represents a string which represents a symbol.
.Sp
Symbol must start with an alphabetical character or an underscore character
('_'), and consist of alphabet, digit, underscore character.
In addition, its length must be less than 64.
.IP "\fB\s-1TOKEN_INT\s0\fR" 4
.IX Item "TOKEN_INT"
Token type which represents an integer value.
.Sp
If a token starts with a minus sign character ('\-') or a digit, it will be
considered as \s-1INT\s0 token. Returned value is a \fBPFC::Core::Value::Integer\fR
instance.
.Sp
This token type may have 64\-bit integer value.
The actual size check must be done by an application.
.IP "\fB\s-1TOKEN_STRING\s0\fR" 4
.IX Item "TOKEN_STRING"
Token type which represents a string value.
.Sp
If a token starts with a double quotation mark ('"'), it will be considered
as \s-1STRING\s0 token. Return value is a \fBPFC::Core::Value::String\fR instance.
.SS "\s-1INTEGER TYPE\s0"
.IX Subsection "INTEGER TYPE"
.IP "\fB\s-1INT_BYTE\s0\fR" 4
.IX Item "INT_BYTE"
Integer type of \s-1BYTE. \s0(unsigned 8\-bit)
.IP "\fB\s-1INT_INT32\s0\fR" 4
.IX Item "INT_INT32"
Integer type of signed 32\-bit value.
.IP "\fB\s-1INT_UINT32\s0\fR" 4
.IX Item "INT_UINT32"
Integer type of unsigned 32\-bit value.
.IP "\fB\s-1INT_INT64\s0\fR" 4
.IX Item "INT_INT64"
Integer type of signed 64\-bit value.
.IP "\fB\s-1INT_UINT64\s0\fR" 4
.IX Item "INT_UINT64"
Integer type of unsigned 64\-bit value.
.IP "\fB\s-1INT_LONG\s0\fR" 4
.IX Item "INT_LONG"
Integer type of signed long integer value.
.IP "\fB\s-1INT_ULONG\s0\fR" 4
.IX Item "INT_ULONG"
Integer type of unsigned long integer value.
.SS "\s-1PARAMETER TYPE\s0"
.IX Subsection "PARAMETER TYPE"
String constants which represents parameter type.
These values can be converted to \fIpfc_cftype_t\fR symbol by appending
\&\*(L"\s-1PFC_CFTYPE_\*(R"\s0 as prefix.
.IP "\fB\s-1TYPE_BOOL\s0\fR" 4
.IX Item "TYPE_BOOL"
Boolean type name in the cfdef file.
.IP "\fB\s-1TYPE_BYTE\s0\fR" 4
.IX Item "TYPE_BYTE"
Byte type name in the cfdef file.
.IP "\fB\s-1TYPE_INT32\s0\fR" 4
.IX Item "TYPE_INT32"
Signed 32\-bit integer type name in the cfdef file.
.IP "\fB\s-1TYPE_UINT32\s0\fR" 4
.IX Item "TYPE_UINT32"
Unsigned 32\-bit integer type name in the cfdef file.
.IP "\fB\s-1TYPE_INT64\s0\fR" 4
.IX Item "TYPE_INT64"
Signed 64\-bit integer type name in the cfdef file.
.IP "\fB\s-1TYPE_UINT64\s0\fR" 4
.IX Item "TYPE_UINT64"
Unsigned 64\-bit integer type name in the cfdef file.
.IP "\fB\s-1TYPE_LONG\s0\fR" 4
.IX Item "TYPE_LONG"
Signed long integer type name in the cfdef file.
.IP "\fB\s-1TYPE_ULONG\s0\fR" 4
.IX Item "TYPE_ULONG"
Unsigned long integer type name in the cfdef file.
.IP "\fB\s-1TYPE_STRING\s0\fR" 4
.IX Item "TYPE_STRING"
String type name in the cfdef file.
.SS "\s-1PARAMETER OPTIONS\s0"
.IX Subsection "PARAMETER OPTIONS"
.IP "\fB\s-1OPT_MIN\s0\fR" 4
.IX Item "OPT_MIN"
Parameter option which defines the minimum value.
.IP "\fB\s-1OPT_MAX\s0\fR" 4
.IX Item "OPT_MAX"
Parameter option which defines the maximum value.
.IP "\fB\s-1OPT_MANDATORY\s0\fR" 4
.IX Item "OPT_MANDATORY"
Parameter option which declares the parameter is mandatory.
.SS "\s-1INTERNAL LIMITS\s0"
.IX Subsection "INTERNAL LIMITS"
.IP "\fB\s-1MAX_STRING_LENGTH\s0\fR" 4
.IX Item "MAX_STRING_LENGTH"
Internal limit of string length.
.IP "\fB\s-1MAX_ARRAY_LENGTH\s0\fR" 4
.IX Item "MAX_ARRAY_LENGTH"
Internal limits of array length.
.SS "\s-1SYMBOL VISIBILITY\s0"
.IX Subsection "SYMBOL VISIBILITY"
.IP "\fB\s-1VIS_DEFAULT\s0\fR" 4
.IX Item "VIS_DEFAULT"
Default visibility.
.IP "\fB\s-1VIS_HIDDEN\s0\fR" 4
.IX Item "VIS_HIDDEN"
Hidden visibility.
.SS "\s-1MISCELLANEOUS\s0"
.IX Subsection "MISCELLANEOUS"
.IP "\fB\s-1SYMBOL_MAXLEN\s0\fR" 4
.IX Item "SYMBOL_MAXLEN"
Maximum length of symbol. (inclusive)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBPFC::Conf::Lexer\fR(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1NEC\s0 Corporation
