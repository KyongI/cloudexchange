.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PFC::Conf::Integer 3"
.TH PFC::Conf::Integer 3 "2015-08-20" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PFC::Conf::Integer \- Integer value
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $value = PFC::Conf::Integer\->new($value, $type);
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
\&\fBPFC::Conf::Integer\fR is a class which represents integer value.
This class has uses a native library, so that it can represent 64\-bit integer
on a perl which is compiled in 32\-bit mode.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section describes about public interface for \fBPFC::Conf::Integer\fR.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "\fInew\fR($value, $type)" 4
.el .IP "\fInew\fR($value, \f(CW$type\fR)" 4
.IX Item "new($value, $type)"
Constructor.
.RS 4
.ie n .IP "$value" 4
.el .IP "\f(CW$value\fR" 4
.IX Item "$value"
A string representation of integer value.
.ie n .IP "$type" 4
.el .IP "\f(CW$type\fR" 4
.IX Item "$type"
Type of integer value.
One of the following type must be specified.
These values are defined in \fBPFC::Conf::Constants\fR.
.RS 4
.IP "\fB\s-1INT_BYTE\s0\fR" 4
.IX Item "INT_BYTE"
A byte value (unsigned 8\-bit value)
.IP "\fB\s-1INT_INT32\s0\fR" 4
.IX Item "INT_INT32"
A signed 32\-bit value.
.IP "\fB\s-1INT_UINT32\s0\fR" 4
.IX Item "INT_UINT32"
An unsigned 32\-bit value.
.IP "\fB\s-1INT_INT64\s0\fR" 4
.IX Item "INT_INT64"
A signed 64\-bit value.
.IP "\fB\s-1INT_UINT64\s0\fR" 4
.IX Item "INT_UINT64"
An unsigned 64\-bit value.
.IP "\fB\s-1INT_LONG\s0\fR" 4
.IX Item "INT_LONG"
A signed long integer value.
.IP "\fB\s-1INT_ULONG\s0\fR" 4
.IX Item "INT_ULONG"
An unsigned long integer value.
.RE
.RS 4
.Sp
An exception will be thrown if the specified value can't represents by the
specified data type. Valid range of \fB\s-1INT_LONG\s0\fR and \fB\s-1INT_ULONG\s0\fR depends on
the system \s-1ILP\s0 model. If the system is \s-1ILP32\s0 system, a long integer value
is considered as 32\-bit integer value. If \s-1LP64\s0 system, a long integer value
is considered as 64\-bit integer value.
.RE
.RE
.RS 4
.RE
.IP "\fIstringify\fR()" 4
.IX Item "stringify()"
Return a string representation of this integer value.
.ie n .IP "\fIcompare\fR($obj, $reverse)" 4
.el .IP "\fIcompare\fR($obj, \f(CW$reverse\fR)" 4
.IX Item "compare($obj, $reverse)"
Emulate \*(L"<=>\*(R" operator.
.RS 4
.ie n .IP "$obj" 4
.el .IP "\f(CW$obj\fR" 4
.IX Item "$obj"
Value to be compared. It may be integer or \fBPFC::Conf::Integer\fR instance.
.ie n .IP "$reverse" 4
.el .IP "\f(CW$reverse\fR" 4
.IX Item "$reverse"
\&\s-1TRUE\s0 will be passed if argument order is reversed.
.RE
.RS 4
.RE
.IP "\fIgetHexValue\fR()" 4
.IX Item "getHexValue()"
Return a string which represents this value in hexadecimal format.
.IP "\fIgetMinHexValue\fR()" 4
.IX Item "getMinHexValue()"
Return the minimum value of this integer type in hexadecimal format.
.IP "\fIgetMaxHexValue\fR()" 4
.IX Item "getMaxHexValue()"
Return the maximum value of this integer type in hexadecimal format.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBPFC::Conf::Constants\fR(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1NEC\s0 Corporation
