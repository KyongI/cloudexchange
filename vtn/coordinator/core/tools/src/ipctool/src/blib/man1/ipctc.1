.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPCTC 1"
.TH IPCTC 1 "2015-08-20" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ipctc \- Inter\-Process Communication framework struct template compiler.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  ipctc [options] template [...]
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
\&\s-1PFC IPC\s0 framework supports data structure transfer between processes.
Data structure must be defined by \s-1IPC\s0 struct template.
\&\fBipctc\fR compiles \s-1IPC\s0 struct template file, and generates header file for
C and \*(C+ language, and struct information file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBipctc\fR takes zero or more template file path as argument.
.IP "\-" 2
If no template file is specified, empty definitions will be generated.
.IP "\-" 2
If two or more template files are specified, they are merged into one
C language header and one \s-1IPC\s0 struct information file.
.PP
Options for \fBipctc\fR are described below:
.IP "\fB\-h\fR|\fB\-\-header\-file\fR \fIfile\fR" 4
.IX Item "-h|--header-file file"
Place C and \*(C+ language header in the file specified by \fIfile\fR.
.Sp
If omitted, C and \*(C+ language header file is not created.
.IP "\fB\-i\fR|\fB\-\-info\-file\fR \fIfile\fR" 4
.IX Item "-i|--info-file file"
Place \s-1IPC\s0 struct information in the file specified by \fIfile\fR.
.Sp
If omitted, it is placed in the file named \fBipc_struct.bin\fR under the
current directory.
.IP "\fB\-S\fR|\fB\-\-cxx\-server\-header\fR \fIfile\fR" 4
.IX Item "-S|--cxx-server-header file"
Place prototypes for \fBpfc::core::ipc::ServerSession\fR methods for user-defined
data structures in the file specified by \fIfile\fR.
.Sp
If omitted, prototypes are not dumped any file.
.IP "\fB\-L\fR|\fB\-\-cxx\-server\-inline\fR \fIfile\fR" 4
.IX Item "-L|--cxx-server-inline file"
Place inline methods of \fBpfc::core::ipc::ServerSession\fR for user-defined
data structures in the file specified by \fIfile\fR.
.Sp
If omitted, inline methods are not dumped to any file.
.IP "\fB\-C\fR|\fB\-\-cxx\-client\-header\fR \fIfile\fR" 4
.IX Item "-C|--cxx-client-header file"
Place prototypes for \fBpfc::core::ipc::ClientSession\fR methods for user-defined
data structures in the file specified by \fIfile\fR.
.Sp
If omitted, prototypes are not dumped to any file.
.IP "\fB\-l\fR|\fB\-\-cxx\-client\-inline\fR \fIfile\fR" 4
.IX Item "-l|--cxx-client-inline file"
Place inline methods of \fBpfc::core::ipc::ClientSession\fR for user-defined
data structures in the file specified by \fIfile\fR.
.Sp
If omitted, inline methods are not dumped to any file.
.IP "\fB\-n\fR|\fB\-\-namespace\fR \fIstring\fR" 4
.IX Item "-n|--namespace string"
Use \fIstring\fR as additional namespace for generated structures.
.Sp
If this option is specified, "\fIstring\fR\*(L" and \*(R"_" are prepended to each
struct name and its type name.
.IP "\fB\-I\fR \fIdir\fR" 4
.IX Item "-I dir"
Append \fIdir\fR to the template file search directory path.
.Sp
A directory where the source template file exists is always prepended to
the search path.
.IP "\fB\-a\fR|\fB\-\-all\fR \fIregexp\fR" 4
.IX Item "-a|--all regexp"
Collect files that match the given regular expression against the file
name under the current directory, and compile them.
.Sp
If this option is specified, template files specified by command line
arguments are ignored.
.IP "\fB\-T\fR|\fB\-\-template\-dir\fR \fIdir\fR" 4
.IX Item "-T|--template-dir dir"
Append template file search path for \fB\-a\fR option.
If this option is specified in conjunction with \fB\-a\fR option,
template files that match the regular expression specified
by \fB\-a\fR option against the file name under \fIdir\fR are compiled.
.Sp
\&\fIdir\fR is also appended to template file search path for \*(L"include\*(R" directive.
.IP "\fB\-s\fR|\fB\-\-stamp\-file\fR \fIfile\fR" 4
.IX Item "-s|--stamp-file file"
Specify file path used to timestamp check.
.Sp
If this option is specified, compiled template file paths are recorded
in the file specified by \fIfile\fR. It will be used to decide whether
\&\s-1IPC\s0 struct information needs to be rebuilt or not.
.Sp
If no template file is compiled, \fBipctc\fR exits with status 75.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Show supported command line options.
.IP "\fB\-\-doc\fR" 4
.IX Item "--doc"
Show this document.
.SH "TEMPLATE FILE FORMAT"
.IX Header "TEMPLATE FILE FORMAT"
\&\s-1IPC\s0 structure template file consists of one or more structure definitions.
\&\fBipc_struct\fR directive declares the beginning of structure definition.
Structure name must follows \fBipc_struct\fR. Similar to C language struct
definition, struct fields are defined within enclosed braces, and a semicolon
is required at the end of field definition, and at the end of struct
definition.
.PP
\&\fBinclude\fR directive can be used to import \s-1IPC\s0 struct definitions in
other template file.
.PP
.Vb 1
\&  include "other_tmplate.ipct";
\&
\&  ipc_struct <name> {
\&       <data\-type>   <field\-name>;
\&       ...
\&  };
.Ve
.PP
<data\-type> is a keyword which determines data type of the field,
and <field\-name> is the field name.
.PP
<name> is used to determine struct name, and its type.
If the name of template file is \fBfoo.ipct\fR, and the name of structure in the
file is \fBbar\fR, the structure is defined as below:
.PP
.Vb 3
\&  typedef struct foo_bar {
\&      ...
\&  } foo_bar_t;
.Ve
.SS "\s-1SUPPORTED DATA TYPE\s0"
.IX Subsection "SUPPORTED DATA TYPE"
<data\-type> must be one of the follows:
.IP "\fB\s-1INT8\s0\fR" 4
.IX Item "INT8"
Signed 8\-bit integer. (int8_t)
.IP "\fB\s-1UINT8\s0\fR" 4
.IX Item "UINT8"
Unsigned 8\-bit integer. (uint8_t)
.IP "\fB\s-1INT16\s0\fR" 4
.IX Item "INT16"
Signed 16\-bit integer. (int16_t)
The field of this type is always aligned to 2 bytes.
.IP "\fB\s-1UINT16\s0\fR" 4
.IX Item "UINT16"
Unsigned 16\-bit integer. (uint16_t)
The field of this type is always aligned to 2 bytes.
.IP "\fB\s-1INT32\s0\fR" 4
.IX Item "INT32"
Signed 32\-bit integer. (int32_t)
The field of this type is always aligned to 4 bytes.
.IP "\fB\s-1UINT32\s0\fR" 4
.IX Item "UINT32"
Unsigned 32\-bit integer. (uint32_t)
The field of this type is always aligned to 4 bytes.
.IP "\fB\s-1INT64\s0\fR" 4
.IX Item "INT64"
Signed 64\-bit integer. (int64_t)
The field of this type is always aligned to 8 bytes.
.IP "\fB\s-1UINT64\s0\fR" 4
.IX Item "UINT64"
Unsigned 64\-bit integer. (uint64_t)
The field of this type is always aligned to 8 bytes.
.IP "\fB\s-1FLOAT\s0\fR" 4
.IX Item "FLOAT"
Single precision floating point. (float)
The field of this type is always aligned to 4 bytes.
.IP "\fB\s-1DOUBLE\s0\fR" 4
.IX Item "DOUBLE"
Double precision floating point. (double)
The field of this type is always aligned to 8 bytes.
.IP "\fB\s-1IPV4\s0\fR" 4
.IX Item "IPV4"
IPv4 address. (struct in_addr)
The field of this type is always aligned to 4 bytes.
.IP "\fB\s-1IPV6\s0\fR" 4
.IX Item "IPV6"
IPv6 address. (struct in6_addr)
The field of this type is always aligned to 8 bytes.
.PP
In addition, other name of struct, which is defined in the same template
file or imported by \fBinclude\fR directive in advance, can be specified
as data type.
.SS "\s-1ARRAY FIELD\s0"
.IX Subsection "ARRAY FIELD"
Array field can be defined in the same way of C language.
.PP
For example, the below definition in the template file generates a uint8_t
array field which has 10 elements.
.PP
.Vb 1
\&  UINT8    foo[8];
.Ve
.PP
Note that zero-length array can't be defined.
.SS "\s-1STRUCTURE SIZE\s0"
.IX Subsection "STRUCTURE SIZE"
The size of structure must be equal or less than 1 megabytes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBPFC::IPC::Parser\fR(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1NEC\s0 Corporation
