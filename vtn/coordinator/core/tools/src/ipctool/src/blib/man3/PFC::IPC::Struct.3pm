.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PFC::IPC::Struct 3"
.TH PFC::IPC::Struct 3 "2015-08-20" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PFC::IPC::Struct \- Structure defined by the IPC struct template file.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $st = PFC::IPC::Struct\->new("my_namespace", "my_struct");
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
\&\fBPFC::IPC::Struct\fR represents a struct defined by the \s-1IPC\s0 struct template
file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section describes about public interface provided by \fBPFC::IPC::Struct\fR.
.ie n .IP "\fBnew\fR($ns, $name, $file, $lnum)" 4
.el .IP "\fBnew\fR($ns, \f(CW$name\fR, \f(CW$file\fR, \f(CW$lnum\fR)" 4
.IX Item "new($ns, $name, $file, $lnum)"
Constructor.
.RS 4
.ie n .IP "\fI\fI$ns\fI\fR" 4
.el .IP "\fI\f(CI$ns\fI\fR" 4
.IX Item "$ns"
Namespace of this structure.
.ie n .IP "\fI\fI$name\fI\fR" 4
.el .IP "\fI\f(CI$name\fI\fR" 4
.IX Item "$name"
Name of structure.
.ie n .IP "\fI\fI$file\fI\fR" 4
.el .IP "\fI\f(CI$file\fI\fR" 4
.IX Item "$file"
Name of template file which contains the definition of this struct.
.ie n .IP "\fI\fI$lnum\fI\fR" 4
.el .IP "\fI\f(CI$lnum\fI\fR" 4
.IX Item "$lnum"
Line number of the template file where this struct is defined.
.RE
.RS 4
.RE
.IP "\fBgetName\fR()" 4
.IX Item "getName()"
Return the name of this struct, without prepending namespace.
.IP "\fBgetStructName\fR()" 4
.IX Item "getStructName()"
Return actual name of this struct.
.IP "\fBadd\fR($field)" 4
.IX Item "add($field)"
Add struct field.
.RS 4
.ie n .IP "\fI\fI$field\fI\fR" 4
.el .IP "\fI\f(CI$field\fI\fR" 4
.IX Item "$field"
\&\fBPFC::IPC::Field\fR instance which represents a struct field.
.RE
.RS 4
.RE
.IP "\fBgetFieldCount\fR()" 4
.IX Item "getFieldCount()"
Return the number of fields.
.IP "\fBgetFields\fR()" 4
.IX Item "getFields()"
Return the list of \fBPFC::IPC::Fields\fR instances.
.IP "\fBfinalize\fR()" 4
.IX Item "finalize()"
Finalize struct definition.
.IP "\fBgetSignature\fR()" 4
.IX Item "getSignature()"
Return layout signature of this struct.
.IP "\fBgetTemplateFile\fR()" 4
.IX Item "getTemplateFile()"
Return the name of the template file where this struct is defined.
.IP "\fBgetLineNumber\fR()" 4
.IX Item "getLineNumber()"
Return the line number of the template file where this struct is defined.
.IP "\fBdumpHeader\fR($fh)" 4
.IX Item "dumpHeader($fh)"
Dump C language header file to the given file handle.
.IP "\fBdumpCxxServerPrototype\fR($fh)" 4
.IX Item "dumpCxxServerPrototype($fh)"
Dump prototype of \fBpfc::core::ServerSession\fR methods for this struct to
the given file handle.
.IP "\fBdumpCxxServerAccessor\fR($fh)" 4
.IX Item "dumpCxxServerAccessor($fh)"
Dump \fBpfc::core::ServerSession\fR inline methods for this struct to the given
file handle.
.IP "\fBdumpCxxClientPrototype\fR($fh)" 4
.IX Item "dumpCxxClientPrototype($fh)"
Dump prototype of \fBpfc::core::ipc::ClientSession\fR methods for this struct to
the given file handle.
.IP "\fBdumpCxxClientAccessor\fR($fh)" 4
.IX Item "dumpCxxClientAccessor($fh)"
Dump \fBpfc::core::ipc::ClientSession\fR inline methods for this struct to the
given file handle.
.IP "\fBgetType\fR()" 4
.IX Item "getType()"
Return \s-1IPC\s0 framework \s-1PDU\s0 type for this type.
This method of this class always returns \fB\s-1IPCTYPE_STRUCT\s0\fR.
.IP "\fBgetAlignment\fR()" 4
.IX Item "getAlignment()"
Return address alignment required by this struct.
.IP "\fBgetSize\fR()" 4
.IX Item "getSize()"
Return size of this type of data.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBipctc\fR(1), \fBPFC::IPC::Field\fR(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1NEC\s0 Corporation
