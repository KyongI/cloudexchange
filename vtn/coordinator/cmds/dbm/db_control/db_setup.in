#!/bin/bash

#
# Copyright (c) 2012-2014 NEC Corporation
# All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this
# distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
#

# unc_setup_db
#
#	set up DB.

dbmf=%INST_SYSSCRIPTDIR%/dbm/dbm_functions
[ -r $dbmf ] || { echo "dbm_functions not found"; exit 1; } && . $dbmf

#
# Candidates for PostgreSQL installation directory.
#
PGINST_LIST="/usr/pgsql* /usr/pgsql/* /usr/postgresql* /usr/postgresql/*"
PGINST_LIST="$PGINST_LIST /usr/lib/pgsql* /usr/lib/pgsql/*"
PGINST_LIST="$PGINST_LIST /usr/lib/postgresql* /usr/lib/postgresql/*"
PGINST_LIST="$PGINST_LIST /usr /usr/local"
PGINST_LIST="$PGINST_LIST /usr/local/pgsql* /usr/local/pgsql/*"
PGINST_LIST="$PGINST_LIST /usr/local/postgresql* /usr/local/postgresql/*"

#
# Required PostgreSQL version.
#
PGSQL_VERSION_MAJOR=9

#
# State flags used for error handling.
#
STATE_RMDB=			# Database should be destroyed on error.
STATE_DBSTOP=			# PostgreSQL should be stopped on error.
STATE_RMSETUP=			# DOT_SETUP should be removed on error.

#
# Option specified by command line.
#
OPTION=

# usage()
#
#   Show usage message.
#
# * input
#     Nothing
#
# * output
#     Nothing
#
usage()
{
	cat << EOF
Usage: db_setup [OPTION]

Setup database configuration and storage area.

  -r     Reset existing database storage area.
  -c     Clean up environment.
         This option erases existing database and log files.
  -h     Show this help message and exit.
EOF
	exit 0
}

# invalid_argument()
#
#   Invalid argument message.
#
# * input
#     Nothing
#
# * output
#     1: error exit
#
invalid_argument()
{
	echo "*** ERROR: Invalid argument."
	exit 1
}

# error_busy()
#     Show error message that the database is now initializing and terminates
#     the program.
#
error_busy()
{
	echo "*** ERROR: Database is now initializing."
	exit 1
}

# data_copy_error()
#
#   data copy error message.
#
# * input
#     Nothing
#
# * output
#     1: error exit
#
data_copy_error()
{
	error_output copy $LOGFILE $TMPLOGFILE
	echo "*** ERROR: Failed in data copy."
	exit 1
}

# db_setup_error()
#
#   DB setup message.
#
# * input
#     arg1: DB operation
#
# * output
#     1: error exit
#
db_setup_error()
{
	error_output $1 $LOGFILE $TMPLOGFILE
	echo "*** ERROR: DB error occurred during DB setting."
	exit 1
}

# error_need_cleanup()
#
#      Show the specified error message, and notify that the runtime
#      runtime environment needs to be reset.
#
#      This function always terminates the program.
#
# * input
#      arg1: Error message.
#
error_need_cleanup()
{
	local msg=$1

	cat <<EOF
*** ERROR: $msg
***     Execute "$0 -c" as "root" user.
EOF

	exit 1
}

# check_user()
#
#      Check whether the current user can execute this program or not.
#
# * input
#      arg1: A non-empty string must be passed in case of initializing DB.
#
check_user()
{
	local initializing="$1"

	local uid=`id -u`
	local uname=`id -un`
	if [ -z "$uid" -o -z "$uname" ]; then
		# This should never happen.
		echo "*** ERROR: Failed to determine current user."
		exit 1
	fi

	if [ ! -e $DOT_SETUP ]; then
		VTN_RUN_UID=$uid
		VTN_RUN_USERNAME=$uname
		return
	fi

	[ -r $DOT_SETUP ] || error_perm "State file is not readable."

	# Read DOT_SETUP with holding shared lock.
	{
		flock -ns 200 || error_busy

		read VTN_RUN_UID VTN_RUN_USERNAME <&200
		if [ -z "$VTN_RUN_UID" -o -z "$VTN_RUN_USERNAME" ]; then
			if [ -z "$initializing" ]; then
				VTN_RUN_UID=$uid
				VTN_RUN_USERNAME=$uname
			else
				error_need_cleanup "Incomplete state file."
			fi
		fi
	} 200< $DOT_SETUP

	local root_clean
	[ "$uid" -eq 0 -a -z "$initializing" ] && root_clean=1
	if [ -z "$root_clean" -a $uid -ne $VTN_RUN_UID ]; then
		cat <<EOF
*** ERROR: This command must be executed as "$VTN_RUN_USERNAME" user.
EOF
		exit 1
	fi

	[ -w $DOT_SETUP ] || error_need_cleanup "State file is not writable."
}

# remove_file()
#
#      Remove the specified file
#      The program exits on any error.
#
# * input
#      arg1: Path to the file to be removed.
#
remove_file()
{
	local path=$1

	[ -e $path ] || return
	if [ ! -w $path ]; then
		error_need_cleanup "File is not writable: $path"
		# NOTREACHED
	fi

	rm -rf $path
	if [ $? -ne 0 ]; then
		error_need_cleanup "Failed to remove file: $path"
		# NOTREACHED
	fi
}

# create_dir()
#
#      Crete a directory.
#      The program exits on any error.
#
# * input
#      arg1: Path to the directory to be created.
#      arg2: Permission bits for the directory.
#      arg3: User and group to be passed to chown command. (optional)
#
create_dir()
{
	local path="$1"
	local perm="$2"
	local owner="$3"

	if [ ! -d $path ]; then
		mkdir -p $path
		if [ $? -ne 0 ]; then
			error_need_cleanup "Failed to create directory: $path"
			# NOTREACHED
		fi
	fi

	chmod $perm $path
	if [ $? -ne 0 ]; then
		error_need_cleanup "Failed to change file mode: $path"
		# NOTREACHED
	fi

	if [ $VTN_RUN_UID -eq 0 -a -n "$owner" ]; then
		chown $owner $path
		if [ $? -ne 0 ]; then
			error_need_cleanup "Failed to change file owner: $path"
			# NOTREACHED
		fi
	fi
}

# init_sysdirs()
#
#      Initialize system directories.
#
init_sysdirs()
{
	# Create system directories. (perm: 0755)
	local sysdirs="$VARRUNDIR $VARDBDIR $DBMUPDATECONFDIR $DBMLOGDIR"
	local dir
	for dir in $sysdirs; do
		create_dir $dir 0755
	done

	# Create system directories. (perm: 01777)
	sysdirs=$DBMTMPDIR
	for dir in $sysdirs; do
		create_dir $dir 01777
	done

	# Create system directories. (owner:SUUSER, perm: 0700)
	sysdirs="$LOG_DIRECTORY"
	for dir in $sysdirs; do
		create_dir $dir 0700 "$SUUSER:$SUUSER"
	done
}

# clean_env()
#
#      Clean up existing database and log files.
#
clean_env()
{
	check_localstatedir
	check_user
	check_vtn_stopped

	{
		flock -nx 200 || error_busy

		local dir
		for dir in %INST_LOCALSTATEDIR%/*; do
			remove_file $dir
		done

		if [ "%INST_UNCWORKDIR%" != "%INST_LOCALSTATEDIR%" ]; then
			for dir in %INST_LOCALSTATEDIR%/*; do
				remove_file $dir
			done
		fi
	} 200>> $DOT_SETUP

	remove_file $DOT_SETUP
}

# check_vtn_stopped()
#       Ensure that VTN is not running.
#
check_vtn_stopped()
{
	if [ -f $DOT_RUNNING ]; then
		cat <<EOF
*** ERROR: VTN is running.
***     Execute "$VTN_STOP" as "$VTN_RUN_USERNAME" user.
EOF
		exit 1
	fi
}

# setup_exit_hook()
#       Called when setup_db() exits.
#
setup_exit_hook()
{
	# Terminate PostgreSQL.
	[ -n "$STATE_DBSTOP" ] && db_stop 2>>$TMPLOGFILE

	# Remove database so that the database will be re-created
	# on succeeding db_setup.
	[ -n "$STATE_RMDB" ] && rm -rf $PGDATA

	# Remove temporary log file.
	rm -f $TMPLOGFILE

	# Remove DOT_SETUP if needed.
	[ -n "$STATE_RMSETUP" ] && rm -f $DOT_SETUP
}

# set_option()
#       Set command line option.
#
# * input
#      arg1: Option specified by command line.
#
set_option()
{
	local opt="$1"

	if [ -n "$OPTION" ]; then
		echo "*** ERROR: $OPTION and $opt are mutually exclusive."
		exit 1
	fi

	OPTION=$opt
}

# create_db()
#
#	create DB.
#
# * input
#	   Nothing
#
# * output
#	   Nothing
#
create_db()
{
	if [ -d $PGDATA ]; then
		[ -z "$OPTION" ] && return
		rm -fr $PGDATA
	fi
	create_dir $PGDATA 0700 "$SUUSER:$SUUSER"
	STATE_RMDB=1

	runas_suuser "$PGINST/bin/initdb -D $PGDATA -U $PGUSER \
		-E UNICODE --no-locale" > /dev/null 2> $TMPLOGFILE
	[ $? -ne 0 ] && db_setup_error initdb
	copy_postgresql_conf $PGSQL_MAJOR $PGSQL_MINOR 2> $TMPLOGFILE
	[ $? -ne 0 ] && data_copy_error

	# Start PostgreSQL.
	(db_start 200<&-) 2> $TMPLOGFILE
	[ $? -ne 0 ] && db_setup_error dbstart
	STATE_DBSTOP=1

	TMP_PGDATABASE=$PGDATABASE
	PGDATABASE=postgres
	local psql="cd /; $PGINST/bin/psql"
	runas_suuser "$psql -c \
		\"ALTER USER $PGUSER PASSWORD '$PGPASSWORD'\"" \
		> /dev/null 2> $TMPLOGFILE
	[ $? -ne 0 ] && db_setup_error alterpass
	runas_suuser "$psql -c \
		\"CREATE USER $UNC_DB_USER WITH NOSUPERUSER \
		PASSWORD '$UNC_DB_PASSWORD';\"" \
		> /dev/null 2> $TMPLOGFILE
	[ $? -ne 0 ] && db_setup_error createuser
	PGDATABASE=$TMP_PGDATABASE
	runas_suuser "$PGINST/bin/createdb -E UNICODE \
		-O $UNC_DB_USER $PGDATABASE" > /dev/null 2> $TMPLOGFILE
	[ $? -ne 0 ] && db_setup_error createdb
	PGUSER=$UNC_DB_USER
	for UNCDATASQLFILE in `ls -1 $UNCDATASQLDIR/*.sql`; do
		runas_suuser "$psql -f $UNCDATASQLFILE" \
			> /dev/null 2> $TMPLOGFILE
		[ $? -ne 0 ] && db_setup_error createtable
	done

	STATE_RMDB=
	STATE_DBSTOP=
	db_stop 2> $TMPLOGFILE
	[ $? -ne 0 ] && db_setup_error dbstop
}

# check_pgsql_version()
#
#      Check PostgreSQL version.
#
# * input
#      arg1:  Path to command provided by PostgreSQL.
#
# * output
#      0:  Success
#      1:  The given command cannot be used.
#
#      Major and minor version are set to PGSQL_MAJOR and PGSQL_MINOR
#      respectively.
#
check_pgsql_version()
{
	[ -x "$1" ] || return 1
	local vstr=`LC_ALL=C $1 --version 2>/dev/null | fgrep '(PostgreSQL)'`
	[ -z "$vstr" ] && return 1
	log_output $$ INFO $0 "$1 --version: $vstr" $LOGFILE

	# Determine version.
	PGSQL_MAJOR=`echo $vstr |
		   sed -e 's/^.*(PostgreSQL) \([0-9]\{1,\}\)\..*$/\1/'`
	[ -z "$PGSQL_MAJOR" ] && return 1
	PGSQL_MINOR=`echo $vstr |
	   sed -e 's/^.*(PostgreSQL) [0-9]\{1,\}\.\([0-9]\{1,\}\)\(\.[0-9]\{1,\}\)\{0,1\}$/\1/'`
	[ -z "$PGSQL_MINOR" ] && return 1

	# Check major version.
	[ "$PGSQL_MAJOR" -lt $PGSQL_VERSION_MAJOR ] && return 1
	[ "$PGSQL_MAJOR" -gt $PGSQL_VERSION_MAJOR ] && return 0

	# Check minor version.
	[ -z "$PGSQL_VERSION_MINOR" ] && return 0
	[ "$PGSQL_MINOR" -lt "$PGSQL_VERSION_MINOR" ] && return 1

	return 0
}

# check_pginst()
#
#      Verify that PGINST is valid.
#
# * input
#      arg1: Path to PostgreSQL installation directory.
#      arg2: If a non-empty string is specified, this function terminates the
#            program on failure.
#
# * output
#      0:  Success
#      1:  The given directory does not contain expected PostgreSQL commands.
#
check_pginst()
{
	local dir="$1"
	local exit_on_err="$2"

	if [ ! -d "$dir" ]; then
		[ -z "$exit_on_err" ] && return 1

		log_fatal "PostgreSQL directory does not exist: $dir" $LOGFILE
		# NOTREACHED
	fi

	local cmd
	for cmd in initdb createdb pg_ctl postgres psql; do
		local path="$dir/bin/$cmd"
		check_pgsql_version $path && continue
		[ -z "$exit_on_err" ] && return 1

		log_output $$ ERROR $0 "PostgreSQL test failed: $path" $LOGFILE
		log_fatal "PostgreSQL was not found at $dir." $LOGFILE
		# NOTREACHED
	done

	return 0
}


# detect_pgsql()
#
#      Determine PostgreSQL installation directory.
#
# * input
#      None
#
# * output
#      0:  PostgreSQL installation directory was set to PGINST.
#      1:  PostgreSQL installation directory was not found.
#
detect_pgsql()
{
	local dir cmd
	for dir in $PGINST_LIST; do
		if check_pginst $dir; then
			PGINST=$dir
			return 0
		fi
	done

	return 1
}

# detect_pgsql_odbc()
#
#      Determine path to PostgreSQL ODBC driver.
#
# * input
#      None
#
# * output
#      0:  Driver path was set to PGSQL_ODBC_DRIVER.
#      1:  Driver was not found.
#
detect_pgsql_odbc()
{
	local dir libdir path
	local libname="psqlodbcw.so"
	local lp64=0
	case `uname -m 2>/dev/null` in
	     x86_64) lp64=1;;
	     *) ;;
	esac

	for dir in $PGINST_LIST; do
		[ "$lp64" = "1" ] && for libdir in lib64 lib64/odbc; do
			path="$dir/$libdir/$libname"
			if [ -f $path -a -r $path ]; then
				PGSQL_ODBC_DRIVER=$path
				return 0
			fi
		done

		for libdir in lib lib/odbc; do
			path="$dir/$libdir/$libname"
			if [ -f $path -a -r $path ]; then
				PGSQL_ODBC_DRIVER=$path
				return 0
			fi
		done

		[ -z "$MULTIARCH" ] && continue
		for libdir in "lib/$MULTIARCH" "lib/$MULTIARCH/odbc"; do
			path="$dir/$libdir/$libname"
			if [ -f $path -a -r $path ]; then
				PGSQL_ODBC_DRIVER=$path
				return 0
			fi
		done
	done

	return 1
}

# setup_pgsql_conf()
#
#      Set up pgsql.conf file that keeps PostgreSQL installation path.
#
# * input
#      None
#
# * output
#      None
#      Program exits on error.
#
setup_pgsql_conf()
{
	local writeconf=0

	if [ -z "$PGINST" ]; then
		# Determine PostgreSQL installation directory.
		detect_pgsql
		if [ -z "$PGINST" ]; then
			log_fatal "PostgreSQL was not found." $LOGFILE
			# NOTREACHED
		fi
		writeconf=1
	else
		check_pginst $PGINST 1
	fi

	if [ -z "$PGSQL_ODBC_DRIVER" ]; then
		# Determine PostgreSQL ODBC driver path.
		detect_pgsql_odbc
		if [ -z "$PGSQL_ODBC_DRIVER" ]; then
			log_fatal "PostgreSQL ODBC driver was not found." \
				$LOGFILE
			# NOTREACHED
		fi
		writeconf=1
	elif [ ! -f "$PGSQL_ODBC_DRIVER" -o ! -r "$PGSQL_ODBC_DRIVER" ]; then
		log_fatal \
		  "PostgreSQL ODBC driver was not found: $PGSQL_ODBC_DRIVER" \
		  $LOGFILE
		# NOTREACHED
	fi

	[ "$writeconf" = "0" ] && return

	create_copyright_file $DBMPGSQLCONF 0644 || \
		log_fatal "Failed to create configuration file: $DBMPGSQLCONF"

	cat >> $DBMPGSQLCONF <<EOF
PGINST=$PGINST
PGSQL_ODBC_DRIVER=$PGSQL_ODBC_DRIVER
EOF
	if [ $? -ne 0 ]; then
		log_fatal "Failed to write configuration file: $DBMPGSQLCONF" \
			  $LOGFILE
		# NOTREACHED
	fi
}

# odbc_driver_install()
#
#   Install odbc driver.
#
# * input
#     Nothing
#
# * output
#     1: error exit
#
odbc_driver_install()
{
	create_copyright_file $ODBCINSTINI 0644 || db_setup_error odbc

	cat >> $ODBCINSTINI <<EOF
[UNC_DB_DRIVER]
Decription	= PostgreSQL ODBC
Driver		= $PGSQL_ODBC_DRIVER
Threading	= 2
BoolsAsChar	= Yes
UsageCount	= 1
EOF
	[ $? -ne 0 ] && db_setup_error odbc
}

# setup_db()
#
#   setup DB
#
# * input
#     Nothing
#
# * output
#     1: error exit
#
setup_db()
{
	check_localstatedir
	check_user 1
	check_vtn_stopped

	{
		flock -nx 200 || error_busy

		chmod 0644 $DOT_SETUP
		if [ $? -ne 0 ]; then
			log_fatal "Failed to change file mode of state file." \
				  $LOGFILE
			# NOTREACHED
		fi

		STATE_RMSETUP=1
		trap setup_exit_hook 0
		init_sysdirs

		setup_pgsql_conf
		odbc_driver_install
		pgpass_setting 2> $TMPLOGFILE
		[ $? -ne 0 ] && data_copy_error
		create_db
		create_setting_file 2> $TMPLOGFILE
		[ $? -ne 0 ] && data_copy_error

		echo "$VTN_RUN_UID $VTN_RUN_USERNAME" > $DOT_SETUP
		if [ $? -ne 0 ]; then
			log_fatal "Failed to write state file." $LOGFILE
			# NOTREACHED
		fi

		STATE_RMSETUP=

		log_output $$ INFO $0 "Setup completed successfully." $LOGFILE
		echo "Setup completed successfully."

	} 200>> $DOT_SETUP
}

export_pg_env

LOGFILE=$DBMLOGDIR/unc_setup_db.log
TMPLOGFILE=$DBMTMPDIR/unc_setup_db.log

trap 'interrupt_error $LOGFILE' 1 2 3 15

while [ $# -gt 0 ]; do
	case "$1" in
		"")
			;;
		-r | -c)
			set_option $1
			;;
		-h)
			usage;;
		*)
			invalid_argument
			;;
	esac
	shift 1
done

if [ "$OPTION" = "-c" ]; then
	clean_env
else
	setup_db
fi

exit 0
